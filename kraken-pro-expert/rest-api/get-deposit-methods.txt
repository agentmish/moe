Spot REST APIFundingGet Deposit Methods
Get Deposit Methods
POST
https://api.kraken.com/0/private/DepositMethods

Retrieve methods available for depositing a particular asset.

API Key Permissions Required: Funds permissions - Query and Funds permissions - Deposit

Request​
APPLICATION/JSON
BODYREQUIRED
nonce
int64
REQUIRED

Nonce used in construction of API-Sign header

asset
string
REQUIRED

Asset being deposited

aclass
string

Asset class being deposited (optional)

Default value: currency
Responses​
200

Deposit methods retrieved.

APPLICATION/JSON
Schema
SCHEMA
result
object[]
Array [
method
string

Name of deposit method

limit

Maximum net amount that can be deposited right now, or false if no limit

fee
string

Amount of fees that will be paid

address-setup-fee
string

Whether or not method has an address setup fee

gen-address
boolean

Whether new addresses can be generated for this method.

minimum
string

Minimum net amount that can be deposited right now

]
error
string[]
AUTHORIZATION: API-KEY
GO
NODEJS
PYTHON
NATIVE
	// Retrieve deposit methods for BTC.

	

	package main

	

	import (

	   "bytes"

	   "crypto/hmac"

	   "crypto/sha256"

	   "crypto/sha512"

	   "encoding/base64"

	   "encoding/json"

	   "fmt"

	   "io"

	   "net/http"

	   "net/url"

	   "time"

	)

	

	func main() {

	   resp, err := request(&Request{

	      Method: "POST",

	      Path:   "/0/private/DepositMethods",

	      Body: map[string]any{

	         "asset": "BTC",

	      },

	      PublicKey:   "",

	      PrivateKey:  "",

	      Environment: "https://api.kraken.com",

	   })

	   if err != nil {

	      panic(err)

	   }

	   defer resp.Body.Close()

	   data, err := io.ReadAll(resp.Body)

	   if err != nil {

	      panic(err)

	   }

	   fmt.Printf("%s\n", data)

	

	}

	

	type Request struct {

	   Method      string

	   Path        string

	   Query       map[string]any

	   Body        map[string]any

	   PublicKey   string

	   PrivateKey  string

	   Environment string

	}

	

	func request(c *Request) (*http.Response, error) {

	   url := c.Environment + c.Path

	   var queryString string

	   if len(c.Query) > 0 {

	      queryValues, err := mapToURLValues(c.Query)

	      if err != nil {

	         return nil, fmt.Errorf("query to URL values: %s", err)

	      }

	      queryString = queryValues.Encode()

	      url += "?" + queryString

	   }

	   var nonce any

	   bodyMap := c.Body

	   if len(c.PublicKey) > 0 {

	      if bodyMap == nil {

	         bodyMap = make(map[string]any)

	      }

	      var ok bool

	      nonce, ok = bodyMap["nonce"]

	      if !ok {

	         nonce = getNonce()

	         bodyMap["nonce"] = nonce

	      }

	   }

	   headers := make(http.Header)

	   var bodyReader io.Reader

	   var bodyString string

	   if len(bodyMap) > 0 {

	      bodyBytes, err := json.Marshal(bodyMap)

	      if err != nil {

	         return nil, fmt.Errorf("json marshal: %s", err)

	      }

	      bodyString = string(bodyBytes)

	      bodyReader = bytes.NewReader(bodyBytes)

	      headers.Set("Content-Type", "application/json")

	   }

	   request, err := http.NewRequest(c.Method, url, bodyReader)

	   if err != nil {

	      return nil, fmt.Errorf("http new request: %s", err)

	   }

	   if len(c.PublicKey) > 0 {

	      signature, err := getSignature(c.PrivateKey, queryString+bodyString, fmt.Sprint(nonce), c.Path)

	      if err != nil {

	         return nil, fmt.Errorf("get signature: %s", err)

	      }

	      headers.Set("API-Key", c.PublicKey)

	      headers.Set("API-Sign", signature)

	   }

	   request.Header = headers

	   return http.DefaultClient.Do(request)

	}

	

	func getNonce() string {

	   return fmt.Sprint(time.Now().UnixMilli())

	}

	

	func getSignature(privateKey string, data string, nonce string, path string) (string, error) {

	   message := sha256.New()

	   message.Write([]byte(nonce + data))

	   return sign(privateKey, []byte(path+string(message.Sum(nil))))

	}

	

	func sign(privateKey string, message []byte) (string, error) {

	   key, err := base64.StdEncoding.DecodeString(privateKey)

	   if err != nil {

	      return "", err

	   }

	   hmacHash := hmac.New(sha512.New, key)

	   hmacHash.Write(message)

	   return base64.StdEncoding.EncodeToString(hmacHash.Sum(nil)), nil

	}

	

	func mapToURLValues(m map[string]any) (url.Values, error) {

	   uv := make(url.Values)

	   for k, v := range m {

	      switch v := v.(type) {

	      case []string:

	         uv[k] = v

	      case string:

	         uv[k] = []string{v}

	      default:

	         j, err := json.Marshal(v)

	         if err != nil {

	            return nil, err

	         }

	         uv[k] = []string{string(j)}

	      }

	   }

	   return uv, nil

	}

REQUEST
COLLAPSE ALL
Base URL
https://api.kraken.com/0
Auth
API-Key
API-Sign
Body
 REQUIRED
{
  "nonce": 1695828271,
  "asset": "XBT"
}

Previous
Funding
Next
Get Deposit Addresses